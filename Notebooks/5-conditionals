{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W39qhoo2_O5i"
      },
      "source": [
        "# Conditionals\n",
        "\n",
        "<hr>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HYooUANM_O5m"
      },
      "source": [
        "**Conditionals** are used to tell your computer to do a set of instructions depending on whether or not a Boolean is `True`. In other words, we are telling the computer:\n",
        "\n",
        "    if something is true:\n",
        "        do task a\n",
        "    otherwise:\n",
        "        do task b\n",
        "\n",
        "In fact, the syntax in Python is almost exactly the same. As an example, let's ask whether or not a codon is the canonical start codon (`AUG`)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LYzSKTI__O5n"
      },
      "outputs": [],
      "source": [
        "x = True\n",
        "\n",
        "if x == 1:\n",
        "    print('Executing if')\n",
        "else:\n",
        "    print(\"Executing else\")\n",
        "print(\"Print regardless of the outcome of the if-else block\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I1MVwIgb_O5p"
      },
      "source": [
        "The syntax of the `if` statement is apparent in the above example. The Boolean expression, `x == 1, is called the **condition**. If it is `True`, the indented statement below it is executed.  This brings up a very important aspect of Python syntax.\n",
        "\n",
        "<div class=\"alert alert-info\">\n",
        "\n",
        "Indentation matters.\n",
        "\n",
        "</div>\n",
        "\n",
        "    \n",
        "Any lines with the same level of indentation will be evaluated together."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "roflK5FH_O5p"
      },
      "outputs": [],
      "source": [
        "x = True\n",
        "\n",
        "if x == 1:\n",
        "    print('Executing if')\n",
        "else:\n",
        "    print(\"Executing else\")\n",
        "    print(\"Print regardless of the outcome of the if-else block\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "If you put the code in the wrong block then you get unexpected behaviour."
      ],
      "metadata": {
        "id": "JgsdMlezLyBh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can add many more if statements using elif (else + if). Elif means previous statement must be false for the current one to be evaluated to be true."
      ],
      "metadata": {
        "id": "0zzgGFMVMDGo"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9ezF8Bip_O5x"
      },
      "outputs": [],
      "source": [
        "purchasePrice = float(input(\"Price at which you have purchased a stock: \"))\n",
        "currentPrice = float(input(\"current price of the stock: \"))\n",
        "\n",
        "if currentPrice < purchasePrice:\n",
        "  print(\"Not a good idea to sell your stock now.\")\n",
        "  print(\"You will lose\", purchasePrice-currentPrice, \"dollar per stock\")\n",
        "elif currentPrice == purchasePrice:\n",
        "  print(\"Still not a good idea to sell your stock now.\")\n",
        "else:\n",
        "   print(\"Sell your stock now.\")\n",
        "   print(\"You will make\", currentPrice-purchasePrice, \"dollar per stock\")\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}